// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: callbreak.proto

package callbreakpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CallbreakService_Register_FullMethodName      = "/callbreak.CallbreakService/Register"
	CallbreakService_Login_FullMethodName         = "/callbreak.CallbreakService/Login"
	CallbreakService_CreateGame_FullMethodName    = "/callbreak.CallbreakService/CreateGame"
	CallbreakService_GameStream_FullMethodName    = "/callbreak.CallbreakService/GameStream"
	CallbreakService_SendEvent_FullMethodName     = "/callbreak.CallbreakService/SendEvent"
	CallbreakService_ReceiveEvents_FullMethodName = "/callbreak.CallbreakService/ReceiveEvents"
)

// CallbreakServiceClient is the client API for CallbreakService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbreakServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	GameStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameEvent, ServerEvent], error)
	SendEvent(ctx context.Context, in *GameEvent, opts ...grpc.CallOption) (*Ack, error)
	ReceiveEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerEvent], error)
}

type callbreakServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbreakServiceClient(cc grpc.ClientConnInterface) CallbreakServiceClient {
	return &callbreakServiceClient{cc}
}

func (c *callbreakServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, CallbreakService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbreakServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, CallbreakService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbreakServiceClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, CallbreakService_CreateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbreakServiceClient) GameStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameEvent, ServerEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CallbreakService_ServiceDesc.Streams[0], CallbreakService_GameStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GameEvent, ServerEvent]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CallbreakService_GameStreamClient = grpc.BidiStreamingClient[GameEvent, ServerEvent]

func (c *callbreakServiceClient) SendEvent(ctx context.Context, in *GameEvent, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, CallbreakService_SendEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbreakServiceClient) ReceiveEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CallbreakService_ServiceDesc.Streams[1], CallbreakService_ReceiveEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, ServerEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CallbreakService_ReceiveEventsClient = grpc.ServerStreamingClient[ServerEvent]

// CallbreakServiceServer is the server API for CallbreakService service.
// All implementations must embed UnimplementedCallbreakServiceServer
// for forward compatibility.
type CallbreakServiceServer interface {
	Register(context.Context, *RegisterRequest) (*AuthResponse, error)
	Login(context.Context, *LoginRequest) (*AuthResponse, error)
	CreateGame(context.Context, *CreateGameRequest) (*GameResponse, error)
	GameStream(grpc.BidiStreamingServer[GameEvent, ServerEvent]) error
	SendEvent(context.Context, *GameEvent) (*Ack, error)
	ReceiveEvents(*SubscribeRequest, grpc.ServerStreamingServer[ServerEvent]) error
	mustEmbedUnimplementedCallbreakServiceServer()
}

// UnimplementedCallbreakServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCallbreakServiceServer struct{}

func (UnimplementedCallbreakServiceServer) Register(context.Context, *RegisterRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCallbreakServiceServer) Login(context.Context, *LoginRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCallbreakServiceServer) CreateGame(context.Context, *CreateGameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedCallbreakServiceServer) GameStream(grpc.BidiStreamingServer[GameEvent, ServerEvent]) error {
	return status.Errorf(codes.Unimplemented, "method GameStream not implemented")
}
func (UnimplementedCallbreakServiceServer) SendEvent(context.Context, *GameEvent) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedCallbreakServiceServer) ReceiveEvents(*SubscribeRequest, grpc.ServerStreamingServer[ServerEvent]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveEvents not implemented")
}
func (UnimplementedCallbreakServiceServer) mustEmbedUnimplementedCallbreakServiceServer() {}
func (UnimplementedCallbreakServiceServer) testEmbeddedByValue()                          {}

// UnsafeCallbreakServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbreakServiceServer will
// result in compilation errors.
type UnsafeCallbreakServiceServer interface {
	mustEmbedUnimplementedCallbreakServiceServer()
}

func RegisterCallbreakServiceServer(s grpc.ServiceRegistrar, srv CallbreakServiceServer) {
	// If the following call pancis, it indicates UnimplementedCallbreakServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CallbreakService_ServiceDesc, srv)
}

func _CallbreakService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbreakServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbreakService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbreakServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbreakService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbreakServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbreakService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbreakServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbreakService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbreakServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbreakService_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbreakServiceServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbreakService_GameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CallbreakServiceServer).GameStream(&grpc.GenericServerStream[GameEvent, ServerEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CallbreakService_GameStreamServer = grpc.BidiStreamingServer[GameEvent, ServerEvent]

func _CallbreakService_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbreakServiceServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbreakService_SendEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbreakServiceServer).SendEvent(ctx, req.(*GameEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbreakService_ReceiveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CallbreakServiceServer).ReceiveEvents(m, &grpc.GenericServerStream[SubscribeRequest, ServerEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CallbreakService_ReceiveEventsServer = grpc.ServerStreamingServer[ServerEvent]

// CallbreakService_ServiceDesc is the grpc.ServiceDesc for CallbreakService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallbreakService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "callbreak.CallbreakService",
	HandlerType: (*CallbreakServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _CallbreakService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CallbreakService_Login_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _CallbreakService_CreateGame_Handler,
		},
		{
			MethodName: "SendEvent",
			Handler:    _CallbreakService_SendEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameStream",
			Handler:       _CallbreakService_GameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveEvents",
			Handler:       _CallbreakService_ReceiveEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "callbreak.proto",
}
